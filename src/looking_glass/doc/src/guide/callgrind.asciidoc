[[callgrind]]
== Callgrind profiling

Looking Glass' primary purpose is the profiling of
Erlang applications. This is done by first tracing
events to a file or socket and then processing it
to extract useful output.

Profiling tools generally have a few different types
of output. This chapter is about callgrind output,
which can be read using the `qcachegrind`/`kcachegrind`
tool.

=== Quick start

Assuming you generated trace files using the profile
mode and the running flag, as detailed in the
xref:tracing_running[Tracing chapter], you can
generate callgrind.out files using the following
command:

[source,erlang]
----
1> lg_callgrind:profile_many("traces.lz4.*", "callgrind.out",
    #{running => true}).
----

This will create a callgrind.out file for all trace files
you generated. For example if you had 'traces.lz4.1' and
'traces.lz4.2', you should now also have 'callgrind.out.1'
and 'callgrind.out.2'.

You can now open these two files in the cachegrind tool,
either from the user interface or from the command line:

[source,bash]
----
$ qcachegrind callgrind.out
----

It will automatically detect and open all files matching
the `callgrind.out.*` pattern.

=== Profiling one file

You can profile one file by calling the function
`lg_callgrind:profile/2,3`. It takes the trace file name,
the output file name and an optional map of options:

[source,erlang]
----
1> lg_callgrind:profile("traces.lz4.1", "callgrind.out.1").
----

It also accepts options:

[source,erlang]
----
1> lg_callgrind:profile("traces.lz4.1", "callgrind.out.1",
    #{running => true}).
----

=== Profiling many files

A convenience function is available for profiling many
files at once: `lg_callgrind:profile_many/2,3`. It takes
a wildcard pattern as first argument and a file name
prefix as second argument:

[source,erlang]
----
1> lg_callgrind:profile_many("traces.lz4.*", "callgrind.out").
----

If there were two trace files, this will result in two
'callgrind.out' files: 'callgrind.out.1' and 'callgrind.out.2'.

It also accepts options:

[source,erlang]
----
1> lg_callgrind:profile_many("traces.lz4.*", "callgrind.out",
    #{running => true}).
----

=== Running information

When the trace files contain running information, meaning
they were created with the `running` flag enabled, you
need to also pass the `running` flag to the profiler in
order to have that information available in 'callgrind.out'
files:

[source,erlang]
----
1> lg_callgrind:profile_many("traces.lz4.*", "callgrind.out",
    #{running => true}).
----

=== Scope

By default the scope of the trace events is global. This
means that the cachegrind tool will group all events
together regardless of where they happened. This is
useful to see which functions take the most resources
overall.

Other times you may want to see which *processes* take
the most resources. To do this you need to instruct
Looking Glass to keep the process information when
generating the 'callgrind.out' files. This is done
using the `scope` option:

[source,erlang]
----
1> lg_callgrind:profile_many("traces.lz4.*", "callgrind.out",
    #{scope => per_process}).
----

=== Using the cachegrind tool

There are a few gotchas to be aware of when using the
cachegrind tool with the output generated by Looking Glass.

The cachegrind tool was built with imperative code in mind.
It does not deal too well with recursion. This means that
the number of times functions are called might not always
be correct, especially for functions that call themselves.
You can see an example of this issue when looking at the
call graph, for example.

Looking Glass uses ELF Object field for storing the pid of
the process when the `scope => per_process` option is used.
This allows you to investigate processes individually by
using the 'grouping' feature and selecting 'ELF Object'.
You can then see which processes take the most resources
and look at the function calls within those processes.

When the running flag is used, the following event types
are generated:

* Total time in microseconds
* Active time in microseconds
* Wait time in microseconds (scheduled out)
* Number of times the process was scheduled out

The following formula is true: `Total = Active + Wait`.

The wait time is the time spent when the process was
scheduled out, in other words it was not running. This
happens in a number of different places, like receive
clauses or when the reduction count reached zero.

The number of times the process was scheduled out may
or may not be accurate at this time. Another part that
may not be accurate is the time spent doing port
operations which may appear as active time when the
process is mostly waiting. Both will be improved
in the future.

While Looking Glass provides line number information
about the various calls, it is not able to identify
which function clause was involved during this call.
This means that the call information for functions
with a lot of clauses will get aggregated at the same
line number when looking at the source code in the
cachegrind tool. This has an important impact on
most standard behaviors, including `handle_event`
from `gen_statem`. You can however structure your
code so that clause-heavy functions only dispatch
to other functions, in turn getting a better view
in the cachegrind tool.

Looking Glass is not able to find the line number
of list comprehensions and funs at this time. They
will always point to line number 1.
