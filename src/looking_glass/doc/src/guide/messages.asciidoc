[[messages]]
== Messages profiling

Looking Glass can also be used to profile Erlang processes
based on the messages they send. It can help you detect
which processes are the most busy and is able to generate
graphs and sequence diagrams to help you debug complex
issues.

=== Enabling the tracing of messages

By default Looking Glass will not include the messages
in the trace files. It needs to be enabled through the
xref:tracing_send[send option].

The output from one tracing session can then be used
for both callgrind and message profiling.

=== Profiling one file

You can profile one file by calling the function
`lg_messages:profile/1`. It takes the trace file name
and prints out the result of the profiling.

[source,erlang]
----
1> lg_messages:profile("traces.lz4.1").
----

It will also create a GraphViz file currently hardcoded as
'digraph.gv' and print further instructions to use it.

=== Profiling many files

A convenience function is available for profiling many
files at once: `lg_callgrind:profile_many/2,3`. It takes
a wildcard pattern as first argument and a file name
prefix as second argument:

You can profile many files by calling the function
`lg_messages:profile_many/1`. It takes a wildcard pattern
and prints out the result of the profiling. The result
is a merge of the events in the different trace files.

[source,erlang]
----
1> lg_messages:profile_many("traces.lz4.*").
----

=== Profile output

The profile step will result in four tables being printed.

* The first table shows the processes that sent the most messages.

* The second table shows the processes that sent the most messages
  to processes that are either dead or never existed in the first place.

* The third table shows the processes that were most frequently sending
  messages to one specific other process (from Alice to Bob).

* The last table shows the processes that were exchanging the most
  messages (from Alice to Bob, and from Bob to Alice).

.Example output
----
1> lg_messages:profile_many("traces.lz4.*").

They sent the most messages
===========================

Process ID      Count      Most recent message
----------      -----      -------------------
<7782.367.0>    147327     {notify,{event,channel_closed,...}}
<7782.356.0>    73035      {notify,{event,connection_closed,...}}
<7782.382.0>    30514      pause
<7782.391.0>    30052      {'$gen_cast',{deliver,{...},...}}
<7782.365.0>    1486       {channel_exit,1,{writer,...}}
[...]

They sent the most messages to dead processes
=============================================

Process ID      Count      Most recent message
----------      -----      -------------------
<7782.367.0>    29         {notify,{event,channel_closed,...}}

They sent the most messages to one other process
================================================

From pid        To pid          Count      Most recent message
--------        ------          -----      -------------------
<7782.367.0>    <7782.365.0>    74318      {notify,{event,channel_closed,...}}
<7782.356.0>    <7782.367.0>    73001      {notify,{event,connection_closed,...}}
<7782.367.0>    <7782.375.0>    73000      {notify,{event,channel_closed,...}}
<7782.382.0>    <7782.391.0>    30202      pause
<7782.391.0>    <7782.375.0>    29894      {'$gen_cast',{deliver,{...},...}}
<7782.365.0>    <7782.375.0>    1485       {channel_exit,1,{writer,...}}
[...]

They sent the most messages to each other
=========================================

Count      Pid 1           Most recent message
           Pid 2           from the corresponding process
-----      -----           ------------------------------
74318      <7782.365.0>    {channel_exit,1,{writer,...}}
           <7782.367.0>    {notify,{event,channel_closed,...}}
73001      <7782.356.0>    {notify,{event,connection_closed,...}}
           <7782.367.0>    {notify,{event,channel_closed,...}}
73000      <7782.367.0>    {notify,{event,channel_closed,...}}
           <7782.375.0>    '<none>'
30351      <7782.382.0>    pause
           <7782.391.0>    {'$gen_cast',{deliver,{...},...}}
29894      <7782.375.0>    '<none>'
           <7782.391.0>    {'$gen_cast',{deliver,{...},...}}
[...]

The file digraph.gv was created. Use GraphViz to make a PNG.
$ dot -Tpng -O digraph.gv

You can also edit the file to remove uninteresting processes.
One line in the file is equal to a connection between two processes.
----

At the end of the output, instructions are given to generate an
image from a GraphViz file. This image shows the relationships
between the processes and indicates how many messages they send
to each other.

The file generated by Looking Glass is a text file that can be
further edited as necessary. It looks like this:

----
digraph {
    concentrate=true;
    splines=ortho;
    edge [arrowhead=none, labelfontsize=12.0, minlen=3];

    "error_logger" -> "<7782.354.0>" [taillabel=0, headlabel=2];
    "<7782.32.0>" -> "<7782.380.0>" [taillabel=0, headlabel=1];
    "<7782.388.0>" -> "<7782.391.0>" [taillabel=0, headlabel=1];
    "error_logger" -> "<7782.355.0>" [taillabel=0, headlabel=4];
[...]
}
----

It is of course possible to edit this file. You may want to
modify the style attributes, or even remove processes from
the output entirely.

=== Generating sequence diagrams

Looking Glass can also be used to extract the sequence of messages
exchanged between two or more processes. This is done using the
`lg_messages_seqdiag` module, which works just like `lg_messages`
ecept the functions take a second argument containing the list of
pids you wish to investigate.

To look at one file:

[source,erlang]
----
1> lg_messages_seqdiag:profile("traces.lz4.1",
    ["<7788.381.0>", "<7788.382.0>", "<7774.383.0>",
     "<7774.384.0>", "<7774.386.0>"]).
----

And many files:

[source,erlang]
----
1> lg_messages_seqdiag:profile_many("traces.lz4.*",
    ["<7788.381.0>", "<7788.382.0>", "<7774.383.0>",
     "<7774.384.0>", "<7774.386.0>"]).
----

The list of pids must be given as a list of strings. This is
because the processes represented do not exist on the running
system. Looking Glass will ignore the node information from the
pid too, so you do not need to worry about it. This explains why
the pids requested in the previous two snippets look as if they
come from different nodes. The pids `"<7888.381.0>"` and
`"<7774.381.0>"` are therefore equivalent.

After running one of these commands, you will end up with a
file 'seq.diag' that can then be used to create an image. This
file can also be edited later on if necessary. It looks like this:

----
seqdiag {
    edge_length = 300;
    activation = none;

    "<7774.382.0>" -> "<7774.381.0>" [label="gen:call #1 {start_child,{collector,{rabbit_queue_collector,start_link,[...]},intrinsic,30000,worker,...}}"];
    "<7774.383.0>" -> "<7774.381.0>" [label="{ack,<7774.383.0>,{ok,<7774.383.0>}}"];
    "<7774.381.0>" -> "<7774.382.0>" [label="#1 {ok,<7774.383.0>}"];
[...]
}
----

Before you can create an image from it, you will need to install
`seqdiag`. Installation instructions will depend on your system.
The project page is at http://blockdiag.com/en/seqdiag/

.Example output
image::seq.png[]

=== Identifying processes

While Looking Glass will display the pid and one sample message
from each process, it's not always ideal to identify which process
is which.

To allievate that, Looking Glass offers a simple solution:
sending a message to the named process `lg` while a tracer is
running. Looking Glass will inevitably log this message in the
trace file, recognize that the target is `lg` and use the
message as metadata. This metadata is then available to any
module reading from the trace file.

The process is only available when Looking Glass is running,
of course, which means we can't just send a message directly.
The following works:

[source,erlang]
----
is_pid(whereis(lg)) andalso (lg ! Info).
----

This can be made into a macro, of course:

[source,erlang]
----
%% Store metadata in the trace files when message tracing is enabled.
-define(LG_INFO(Info), is_pid(whereis(lg)) andalso (lg ! Info)).
----

And can then be used like this:

[source,erlang]
----
?LG_INFO(#{process_type => reader}).
----

The message must always be a map. Reading the trace file
will otherwise fail. Looking Glass only recognizes the
`process_type` field, and uses it as a label to identify
processes when profiling exchanges of messages. You are
free to define any other value you need in the map.

The metadata can also be updated by sending another message
or by calling the macro a second time. The operation done
on the map will be a merge by default.
