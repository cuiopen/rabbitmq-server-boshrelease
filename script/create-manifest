#!/usr/bin/env bash

set -e

[ -z "$DEBUG" ] || set -x

RMQ_PACKAGE="https://github.com/rabbitmq/rabbitmq-server/releases/download/rabbitmq_v3_6_10/rabbitmq-server-generic-unix-3.6.10.tar.xz"

ERLANG_VERSION="19.3.6"
ERLANG_VERSIONS=( packages/erlang* )
ERLANG_COOKIE="$(pwgen 20 1)"

NODES_COUNT=2
NODES_TYPE="t2.small"

DEPLOYMENT_NAME="rmq-$USER"

SERVER_USER="admin"
SERVER_PASS="$(pwgen 20 1)"

LASTPASS_DATADOG_CREDENTIALS="Shared-RabbitMQ/RabbitMQ Core Datadog"
LASTPASS_BOSH_DIRECTOR_CREDENTIALS="Shared-London Services/london-ci/bosh-env-tarantino"
LASTPASS_CF_CREDENTIALS="Shared-London Services/london-ci/cf-env-tarantino"
RELEASE_VERSION="$(awk '/ version/ { print $2 }' < releases/rabbitmq-server/index.yml | tail -n 1)"

# https://bosh.io/stemcells/bosh-aws-xen-hvm-ubuntu-trusty-go_agent
BOSH_STEMCELL_NAME=bosh-aws-xen-hvm-ubuntu-trusty-go_agent
BOSH_STEMCELL_VERSION=3421.11
BOSH_STEMCELL_VERSION_SHA1=98f9b71398f0f771e8a4bbaf5531440b99bae540

main() {
  if should_create_new_manifest
  then
    lpass_login
    generate_deployment
    generate_manifest
    ok
  fi
}

should_create_new_manifest() {
  if manifest_exists
  then
    read -rp "Do you want to overwrite the existing manifest? (y|n) " overwrite
    [[ "$overwrite" =~ ^[Yy] ]]
  else
    true
  fi
}

manifest_exists() {
  [ -f deployment ] && [ -f manifest.yml ]
}

lpass_login() {
  [[ $(lpass status) =~ Logged\ in\ as.*@pivotal.io ]] || (
    echo "You must   lpass login   with your pivotal.io user"
    exit 1
  )
}

generate_deployment() {
  echo
  read -rp "What name would you like to give your deployment? DEPLOYMENT WILL FAIL IF IT CONTAINS . IN THE NAME (press enter for $DEPLOYMENT_NAME): " deployment_name
  DEPLOYMENT_NAME="${deployment_name:=$DEPLOYMENT_NAME}"

  echo
  read -rp "Which BOSH release would you like to deploy? (press enter for $RELEASE_VERSION): " release_version
  RELEASE_VERSION="${release_version:=$RELEASE_VERSION}"

  echo
  read -rp "Which RabbitMQ package do you want to deploy? (press enter for $RMQ_PACKAGE): " rmq_package
  RMQ_PACKAGE="${rmq_package:=$RMQ_PACKAGE}"

  echo
  read -rp "Which Erlang version do you want to deploy? (press enter for $ERLANG_VERSION or choose one of: ${ERLANG_VERSIONS[*]#*erlang-}): " erlang_version
  ERLANG_VERSION="${erlang_version:=$ERLANG_VERSION}"

  echo
  read -rp "What username should we set for the Management UI? (press enter for $SERVER_USER): " server_user
  SERVER_USER="${server_user:=$SERVER_USER}"

  echo
  read -rp "What password should we set for the Management UI? (press enter for $SERVER_PASS): " server_pass
  SERVER_PASS="${server_pass:=$SERVER_PASS}"

  echo
  read -rp "What Erlang cookie should we set? (press enter for $ERLANG_COOKIE): " erlang_cookie
  ERLANG_COOKIE="${erlang_cookie:=$ERLANG_COOKIE}"

  echo
  read -rp "How many nodes should there be in this cluster? (press enter for $NODES_COUNT): " nodes_count
  NODES_COUNT="${nodes_count:=$NODES_COUNT}"

  echo
  read -rp "Lastly, what instance type do you want the nodes to be? (press enter for $NODES_TYPE): " nodes_type
  NODES_TYPE="${nodes_type:=$NODES_TYPE}"

  cat > deployment <<EOF
BOSH_DIRECTOR_FQDN=$(bosh_host)

BOSH_STEMCELL_NAME=$BOSH_STEMCELL_NAME
BOSH_STEMCELL_VERSION=$BOSH_STEMCELL_VERSION
BOSH_STEMCELL_VERSION_SHA1=$BOSH_STEMCELL_VERSION_SHA1

DEPLOYMENT_NAME=$DEPLOYMENT_NAME
RELEASE_VERSION=$RELEASE_VERSION

RMQ_PACKAGE=$RMQ_PACKAGE
NODES_COUNT=$NODES_COUNT
NODES_TYPE=$NODES_TYPE

SERVER_USER=$SERVER_USER
SERVER_PASS=$SERVER_PASS

ERLANG_COOKIE=$ERLANG_COOKIE
ERLANG_VERSION=$ERLANG_VERSION
EOF
}

bosh_host() {
  lpass show --notes "$LASTPASS_BOSH_DIRECTOR_CREDENTIALS" |
    awk '/bosh-host/ { print $2 }'
}

bosh_uuid() {
  lpass show --notes "$LASTPASS_BOSH_DIRECTOR_CREDENTIALS" |
    awk '/uuid/ { print $2 }'
}

generate_manifest() {
  # shellcheck source=/dev/null
  . deployment
  cat - rabbitmq-server.yml > manifest.yml <<EOF
bosh_stemcell_name: &bosh_stemcell_name $BOSH_STEMCELL_NAME
bosh_stemcell_version: &bosh_stemcell_version $BOSH_STEMCELL_VERSION

deployment_name: &deployment_name $DEPLOYMENT_NAME
release_version: &release_version $RELEASE_VERSION

rabbitmq_generic_unix: &rabbitmq_generic_unix $RMQ_PACKAGE
instance_count: &instance_count $NODES_COUNT
instance_type: &instance_type $NODES_TYPE

server_host: &server_host $DEPLOYMENT_NAME.$BOSH_DIRECTOR_FQDN
server_user: &server_user $SERVER_USER
server_pass: &server_pass $SERVER_PASS

erlang_cookie: &erlang_cookie $ERLANG_COOKIE
erlang_version: &erlang_version $ERLANG_VERSION

cf_cc_url: &cf_cc_url $(cf --url)
cf_cc_user: &cf_cc_user $(cf --user)
cf_cc_pass: &cf_cc_pass $(cf --pass)

datadog_api_key: &datadog_api_key $(datadog_api_key)

bosh_director_uuid: &bosh_director_uuid $(bosh_uuid)
EOF
}

cf() {
  lpass show "$@" "$LASTPASS_CF_CREDENTIALS"
}

datadog_api_key() {
  lpass show --notes "$LASTPASS_DATADOG_CREDENTIALS" |
    awk '/bosh/ { print $2 }'
}

ok() {
  echo "
Manifest created, you can now deploy with script/deploy
"
}

main
